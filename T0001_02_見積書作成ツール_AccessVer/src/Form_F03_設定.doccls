Option Compare Database
Option Explicit

'**************************
'*設定Form
'**************************

'定数

'変数
Private previousScreenName As String
Private objSettingForm As clsAbsSettingForm
Private formData_ As FormData
Private objCmbEvent As clsCmbListener

Private Type FormData
    IDFirldName As String
    subFormRcdSourceObj As String
End Type


'******************************************************************************************
'*getter/setter
'******************************************************************************************
Public Property Get gIDFieldName() As String
    gIDFieldName = formData_.IDFirldName
End Property

Public Property Get gSubFormRcdSourceObj() As String
    gSubFormRcdSourceObj = formData_.subFormRcdSourceObj
End Property







'******************************************************************************************
'*関数名    ：Form_Open
'*機能      ：
'*引数(1)   ：
'******************************************************************************************
Private Sub Form_Open(Cancel As Integer)
    
    '定数
    Const FUNC_NAME As String = "Form_Open"
    
    '変数
    Dim arrArgs As Variant
    Dim i As Long
    
    On Error GoTo ErrorHandler

    'Argsを取得
    arrArgs = Split(Nz(Me.OpenArgs, ""), ";")
    For i = LBound(arrArgs) To UBound(arrArgs)
        Select Case i
        Case LBound(arrArgs)
            previousScreenName = arrArgs(i)
        Case LBound(arrArgs) + 1
            Set objSettingForm = geneObjSettingForm(CLng(arrArgs(i)))
        Case Else
            Exit For
        End Select
    Next i
    
    'Argsの不正検知
    If previousScreenName = "" Or objSettingForm Is Nothing Then
        #If Not CBool(DEBUG_MODE) Then
            MsgBox "引数が不正です。" & _
                   vbNewLine & _
                   "画面を開けませんでした。", _
                   vbCritical, TOOL_NAME
            Cancel = True
            GoTo ExitHandler
        #Else
            If gObjDB Is Nothing Then Call initializeTool
            previousScreenName = FormName_02
            Set objSettingForm = New clsSettingFormCnsmTx
        #End If
    End If
    
ExitHandler:
    
    Exit Sub
    
ErrorHandler:

    MsgBox "エラーが発生したため、マクロを終了します。" & _
           vbLf & _
           "関数名：" & FUNC_NAME & _
           vbLf & _
           "エラー番号：" & err.Number & vbNewLine & _
           err.description, vbCritical, TOOL_NAME
        
    GoTo ExitHandler
        
End Sub


'******************************************************************************************
'*関数名    ：Form_Load
'*機能      ：
'*引数(1)   ：
'******************************************************************************************
Private Sub Form_Load()
    
    '定数
    Const FUNC_NAME As String = "Form_Load"
    
    '変数
    Dim dicInfo As Object
    
    On Error GoTo ErrorHandler

    Set dicInfo = CreateObject(SCRIPTING_DICTIONARY)
    
    'フォームデータの初期化
    With formData_
        .IDFirldName = ""
    End With
    
    'フォームの情報取得
    If Not objSettingForm.getInfo(dicInfo) Then GoTo ExitHandler
    
    '取得情報をフォームに設定
    Me.Caption = dicInfo("formTitle")
    Me.subF_Datasheet.SourceObject = dicInfo("subFormSourceObject")
    Me.cmb_selectedRcd.RowSource = dicInfo("rowSourceOfCmbSelectedRcd")
    formData_.IDFirldName = dicInfo("IDFirldName")
    formData_.subFormRcdSourceObj = dicInfo("subFormRcdSourceObj")
    
    'イベントリスナー設定
    Set objCmbEvent = New clsCmbListener: Set objCmbEvent.ComboBox = Me.cmb_selectedRcd
    
ExitHandler:

    Exit Sub
    
ErrorHandler:

    MsgBox "エラーが発生したため、マクロを終了します。" & _
           vbLf & _
           "関数名：" & FUNC_NAME & _
           vbLf & _
           "エラー番号：" & err.Number & vbNewLine & _
           err.description, vbCritical, TOOL_NAME
        
    GoTo ExitHandler
        
End Sub





'******************************************************************************************
'*関数名    ：cmb_selectedRcd_AfterUpdate
'*機能      ：
'*引数(1)   ：
'******************************************************************************************
Private Sub cmb_selectedRcd_AfterUpdate()
    
    '定数
    Const FUNC_NAME As String = "cmb_selectedRcd_AfterUpdate"
    
    '変数
    Dim selectedVal As Variant
    
    On Error GoTo ErrorHandler
    
    selectedVal = Me.cmb_selectedRcd.VALUE
    If Len(selectedVal) = 0 Or Not IsNumeric(selectedVal) Then GoTo ExitHandler
    
    'サブフォームのデータシートで、
    '選択した値とID列の値が同じであるレコードに移動する
    With Me.subF_Datasheet.Form.recordset
        .FindFirst formData_.IDFirldName & _
            "=" & _
            myVBVacant & _
            CStr(selectedVal)
        'ヒットなしの場合、先頭に移動
        If .NoMatch Then If Not (.EOF And .BOF) Then .MoveFirst
    End With

ExitHandler:

    Exit Sub
    
ErrorHandler:

    MsgBox "エラーが発生したため、マクロを終了します。" & _
           vbLf & _
           "関数名：" & FUNC_NAME & _
           vbLf & _
           "エラー番号：" & err.Number & vbNewLine & _
           err.description, vbCritical, TOOL_NAME
        
    GoTo ExitHandler
        
End Sub






'******************************************************************************************
'*関数名    ：btn_register_Click
'*機能      ：
'*引数(1)   ：
'******************************************************************************************
Private Sub btn_register_Click()
    
    '定数
    Const FUNC_NAME As String = "btn_register_Click"
    
    '変数
    
    On Error GoTo ErrorHandler
    
    '登録/編集画面に遷移
    DoCmd.OpenForm FormName_04, , , , , , _
        Me.Name & _
        ";" & _
        CStr(objSettingForm.typeSettingForm Or eTypeOperate.opeRegister)
    
    '自画面を非表示
    Me.Visible = False
    
ExitHandler:

    Exit Sub
    
ErrorHandler:

    MsgBox "エラーが発生したため、マクロを終了します。" & _
           vbLf & _
           "関数名：" & FUNC_NAME & _
           vbLf & _
           "エラー番号：" & err.Number & vbNewLine & _
           err.description, vbCritical, TOOL_NAME
        
    GoTo ExitHandler
        
End Sub



'******************************************************************************************
'*関数名    ：btn_edit_Click
'*機能      ：
'*引数(1)   ：
'******************************************************************************************
Private Sub btn_edit_Click()
    
    '定数
    Const FUNC_NAME As String = "btn_edit_Click"
    
    '変数
    
    On Error GoTo ErrorHandler
    
    'レコードの存在
    If (Me.subF_Datasheet.Form.recordset.BOF And Me.subF_Datasheet.Form.recordset.EOF) Or Me.subF_Datasheet.Form.recordset.RecordCount = 0 Then
        MsgBox "レコードが存在しません。", vbCritical, MESSAGE_TITLE_WARNING
        GoTo ExitHandler
    End If
    
    
    '登録/編集画面に遷移
    DoCmd.OpenForm FormName_04, , , , , , _
        Me.Name & _
        ";" & _
        CStr(objSettingForm.typeSettingForm Or eTypeOperate.opeEdit)
    
    '自画面を非表示
    Me.Visible = False
    
    
ExitHandler:

    Exit Sub
    
ErrorHandler:

    MsgBox "エラーが発生したため、マクロを終了します。" & _
           vbLf & _
           "関数名：" & FUNC_NAME & _
           vbLf & _
           "エラー番号：" & err.Number & vbNewLine & _
           err.description, vbCritical, TOOL_NAME
        
    GoTo ExitHandler
        
End Sub


'******************************************************************************************
'*関数名    ：btn_delete_Click
'*機能      ：
'*引数      ：
'******************************************************************************************
Private Sub btn_delete_Click()
    
    '定数
    Const FUNC_NAME As String = "btn_delete_Click"
    
    '変数
    
    On Error GoTo ErrorHandler
    
    '削除関数呼び出し
    If Not objSettingForm.objSettingFormCommon.deleteCurrentRcd Then GoTo ExitHandler

ExitHandler:

    Exit Sub
    
ErrorHandler:

    MsgBox "エラーが発生したため、マクロを終了します。" & _
           vbLf & _
           "関数名：" & FUNC_NAME & _
           vbLf & _
           "エラー番号：" & err.Number & vbNewLine & _
           err.description, vbCritical, TOOL_NAME
        
    GoTo ExitHandler
        
End Sub



'******************************************************************************************
'*関数名    ：btn_back_Click
'*機能      ：
'*引数      ：
'******************************************************************************************
Private Sub btn_back_Click()
    
    '定数
    Const FUNC_NAME As String = "btn_back_Click"
    
    '変数
    
    On Error GoTo ErrorHandler

    '前画面を表示
    Forms(previousScreenName).Visible = True
    
    '自画面を非表示
    DoCmd.Close acForm, Me.Name, acSaveNo
    
ExitHandler:

    Exit Sub
    
ErrorHandler:

    MsgBox "エラーが発生したため、マクロを終了します。" & _
           vbLf & _
           "関数名：" & FUNC_NAME & _
           vbLf & _
           "エラー番号：" & err.Number & vbNewLine & _
           err.description, vbCritical, TOOL_NAME
        
    GoTo ExitHandler
        
End Sub
